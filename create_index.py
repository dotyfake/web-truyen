#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script t·∫°o file index.json cho web ƒë·ªçc truy·ªán v·ªõi giao di·ªán ƒë·ªì h·ªça (GUI).
T√°c gi·∫£: Gemini (d·ª±a tr√™n script g·ªëc)
M√¥ t·∫£: Qu√©t th∆∞ m·ª•c m·∫π ch·ª©a c√°c th∆∞ m·ª•c truy·ªán, t·ª± ƒë·ªông t·∫°o file index.json
cho c√°c truy·ªán ch∆∞a c√≥, ho·∫∑c ghi ƒë√® n·∫øu ƒë∆∞·ª£c ch·ªçn.
"""

import os
import json
import re
import threading
import queue
from pathlib import Path
from typing import List, Dict, Optional
from datetime import datetime

# --- Imports cho GUI ---
import tkinter as tk
from tkinter import ttk, filedialog, scrolledtext

# ==============================================================================
# PH·∫¶N LOGIC C·ªêT L√ïI (Kh√¥ng thay ƒë·ªïi nhi·ªÅu so v·ªõi b·∫£n g·ªëc)
# ==============================================================================

def extract_title_from_content(file_path: str) -> Optional[str]:
    """Tr√≠ch xu·∫•t title t·ª´ n·ªôi dung file markdown."""
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            lines = f.readlines()
        chapter_pattern = re.compile(r'.*(ch∆∞∆°ng|chapter).*', re.IGNORECASE | re.UNICODE)
        for line in lines[:20]:
            line = line.strip()
            if not line:
                continue
            clean_line = re.sub(r'^#+\s*', '', line).strip()
            if chapter_pattern.search(clean_line):
                return clean_line
    except Exception:
        return None
    return None

def get_title_from_filename(filename: str) -> str:
    """T·∫°o title t·ª´ t√™n file."""
    name = os.path.splitext(filename)[0]
    name = re.sub(r'[-_]', ' ', name)
    name = ' '.join(word.capitalize() for word in name.split())
    return name

def scan_folder(folder_path: str, log_queue: queue.Queue) -> List[Dict[str, any]]:
    """
    Qu√©t th∆∞ m·ª•c v√† t·∫°o danh s√°ch ch∆∞∆°ng.
    H√†m n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠a ƒë·ªÉ th√™m thu·ªôc t√≠nh 'index'.
    """
    chapters = []
    folder = Path(folder_path)
    if not folder.exists():
        log_queue.put(f"L·ªói: Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {folder_path}")
        return chapters

    md_files = sorted(
        list(folder.glob("*.md")),
        key=lambda f: int(re.search(r'\d+', f.stem).group() or 0) if re.search(r'\d+', f.stem) else 99999
    )

    if not md_files:
        log_queue.put(f"  -> C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y file .md n√†o trong: {folder.name}")
        return chapters

    log_queue.put(f"  -> T√¨m th·∫•y {len(md_files)} file markdown. ƒêang x·ª≠ l√Ω...")
    
    for i, md_file in enumerate(md_files):
        filename = md_file.name
        title = extract_title_from_content(str(md_file)) or get_title_from_filename(filename)
        
        chapters.append({
            "index": i,  # Thu·ªôc t√≠nh index ƒë·ªÉ s·∫Øp x·∫øp ch√≠nh x√°c
            "title": title,
            "file": filename
        })
    return chapters

# ==============================================================================
# PH·∫¶N LOGIC X·ª¨ L√ù BATCH (ƒê√£ ƒë∆∞·ª£c s·ª≠a ƒë·ªïi)
# ==============================================================================

def create_index_for_story(story_folder_path: str, log_queue: queue.Queue) -> bool:
    """
    T·∫°o file index.json cho m·ªôt th∆∞ m·ª•c truy·ªán c·ª• th·ªÉ (kh√¥ng t∆∞∆°ng t√°c).
    """
    try:
        chapters = scan_folder(story_folder_path, log_queue)
        if not chapters:
            log_queue.put(f"  -> B·ªè qua t·∫°o index cho '{os.path.basename(story_folder_path)}' v√¨ kh√¥ng c√≥ ch∆∞∆°ng.")
            return False

        folder_name = os.path.basename(story_folder_path)
        auto_title = get_title_from_filename(folder_name)
        description = f"Truy·ªán {len(chapters)} ch∆∞∆°ng"

        index_data = {
            "title": auto_title,
            "description": description,
            "folder": folder_name,
            "chapters": chapters,
            "total": len(chapters),
            "created_by": "auto_script_v2",
            "created_at": datetime.now().isoformat(),
            "last_updated": datetime.now().isoformat()
        }

        output_path = os.path.join(story_folder_path, "index.json")
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(index_data, f, ensure_ascii=False, indent=2)

        log_queue.put(f"  -> ‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng index.json cho '{folder_name}' v·ªõi {len(chapters)} ch∆∞∆°ng.")
        return True
    except Exception as e:
        log_queue.put(f"  -> ‚ùå L·ªói khi t·∫°o index cho '{os.path.basename(story_folder_path)}': {e}")
        return False

def process_parent_directory(parent_path: str, overwrite: bool, log_queue: queue.Queue):
    """
    H√†m ch√≠nh ƒë·ªÉ qu√©t th∆∞ m·ª•c m·∫π v√† x·ª≠ l√Ω c√°c th∆∞ m·ª•c con.
    """
    log_queue.put("="*60)
    log_queue.put(f"üöÄ B·∫Øt ƒë·∫ßu qu√©t th∆∞ m·ª•c: {parent_path}")
    log_queue.put(f"T√πy ch·ªçn ghi ƒë√®: {'B·∫≠t' if overwrite else 'T·∫Øt'}")
    log_queue.put("="*60)

    parent = Path(parent_path)
    if not parent.is_dir():
        log_queue.put("L·ªói: ƒê∆∞·ªùng d·∫´n ƒë√£ ch·ªçn kh√¥ng ph·∫£i l√† m·ªôt th∆∞ m·ª•c.")
        log_queue.put("Ho√†n th√†nh v·ªõi l·ªói.")
        return

    story_folders = [d for d in parent.iterdir() if d.is_dir() and not d.name.startswith('.')]
    if not story_folders:
        log_queue.put("Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c truy·ªán n√†o trong th∆∞ m·ª•c ƒë√£ ch·ªçn.")
        log_queue.put("Ho√†n th√†nh.")
        return

    log_queue.put(f"T√¨m th·∫•y {len(story_folders)} th∆∞ m·ª•c truy·ªán. B·∫Øt ƒë·∫ßu x·ª≠ l√Ω...")
    success_count = 0
    skipped_count = 0
    
    for i, folder in enumerate(story_folders, 1):
        log_queue.put(f"\n({i}/{len(story_folders)}) ƒêang x·ª≠ l√Ω th∆∞ m·ª•c: {folder.name}")
        index_file = folder / "index.json"
        
        if index_file.exists() and not overwrite:
            log_queue.put("  -> index.json ƒë√£ t·ªìn t·∫°i. B·ªè qua.")
            skipped_count += 1
            continue

        if create_index_for_story(str(folder), log_queue):
            success_count += 1
    
    log_queue.put("\n" + "="*60)
    log_queue.put("üéâ X·ª≠ l√Ω ho√†n t·∫•t!")
    log_queue.put(f"- T·∫°o/C·∫≠p nh·∫≠t th√†nh c√¥ng: {success_count} truy·ªán.")
    log_queue.put(f"- B·ªè qua (ƒë√£ c√≥ index): {skipped_count} truy·ªán.")
    log_queue.put("="*60)


# ==============================================================================
# PH·∫¶N GIAO DI·ªÜN ƒê·ªí H·ªåA (GUI) V·ªöI TKINTER
# ==============================================================================

class Application(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.master.title("C√¥ng C·ª• T·∫°o Index Truy·ªán")
        self.master.geometry("800x600")
        self.pack(fill="both", expand=True, padx=10, pady=10)
        
        self.folder_path = tk.StringVar()
        self.overwrite_var = tk.BooleanVar(value=False)
        self.log_queue = queue.Queue()
        
        self.create_widgets()
        self.process_log_queue()

    def create_widgets(self):
        # --- Frame ch·ªçn th∆∞ m·ª•c ---
        folder_frame = ttk.LabelFrame(self, text="1. Ch·ªçn th∆∞ m·ª•c m·∫π ch·ª©a truy·ªán")
        folder_frame.pack(fill="x", padx=5, pady=5)

        folder_entry = ttk.Entry(folder_frame, textvariable=self.folder_path, state="readonly", width=80)
        folder_entry.pack(side="left", fill="x", expand=True, padx=5, pady=5)

        browse_btn = ttk.Button(folder_frame, text="Ch·ªçn Th∆∞ M·ª•c...", command=self.select_folder)
        browse_btn.pack(side="left", padx=5, pady=5)

        # --- Frame t√πy ch·ªçn v√† th·ª±c thi ---
        action_frame = ttk.LabelFrame(self, text="2. T√πy ch·ªçn v√† Th·ª±c thi")
        action_frame.pack(fill="x", padx=5, pady=5)
        
        overwrite_check = ttk.Checkbutton(action_frame, text="Ghi ƒë√® file index.json ƒë√£ c√≥", variable=self.overwrite_var)
        overwrite_check.pack(side="left", padx=5, pady=10)
        
        self.run_button = ttk.Button(action_frame, text="B·∫Øt ƒê·∫ßu Qu√©t & T·∫°o Index", command=self.start_processing)
        self.run_button.pack(side="right", padx=5, pady=10)

        # --- Frame hi·ªÉn th·ªã log ---
        log_frame = ttk.LabelFrame(self, text="3. Ti·∫øn tr√¨nh")
        log_frame.pack(fill="both", expand=True, padx=5, pady=5)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, wrap=tk.WORD, state="disabled", font=("Courier New", 10))
        self.log_text.pack(fill="both", expand=True, padx=5, pady=5)

    def select_folder(self):
        path = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c m·∫π ch·ª©a c√°c th∆∞ m·ª•c truy·ªán")
        if path:
            self.folder_path.set(path)

    def start_processing(self):
        path = self.folder_path.get()
        if not path:
            self.log("L·ªói: Vui l√≤ng ch·ªçn m·ªôt th∆∞ m·ª•c tr∆∞·ªõc.", error=True)
            return

        self.log_text.config(state="normal")
        self.log_text.delete('1.0', tk.END)
        self.log_text.config(state="disabled")
        
        self.run_button.config(state="disabled", text="ƒêang x·ª≠ l√Ω...")
        
        # Ch·∫°y t√°c v·ª• n·∫∑ng trong m·ªôt thread ri√™ng ƒë·ªÉ kh√¥ng l√†m treo GUI
        thread = threading.Thread(
            target=self.run_task_in_thread,
            args=(path, self.overwrite_var.get()),
            daemon=True
        )
        thread.start()

    def run_task_in_thread(self, path, overwrite):
        """H√†m n√†y s·∫Ω ƒë∆∞·ª£c th·ª±c thi trong thread ri√™ng bi·ªát."""
        try:
            process_parent_directory(path, overwrite, self.log_queue)
        except Exception as e:
            self.log_queue.put(f"\nL·ªñI NGO·∫†I L·ªÜ: {e}")
        finally:
            # B√°o cho main thread bi·∫øt l√† ƒë√£ xong
            self.log_queue.put("TASK_COMPLETE")

    def process_log_queue(self):
        """Ki·ªÉm tra queue v√† c·∫≠p nh·∫≠t log tr√™n GUI."""
        try:
            while True:
                message = self.log_queue.get_nowait()
                if message == "TASK_COMPLETE":
                    self.run_button.config(state="normal", text="B·∫Øt ƒê·∫ßu Qu√©t & T·∫°o Index")
                else:
                    self.log(message)
        except queue.Empty:
            pass
        finally:
            self.master.after(100, self.process_log_queue)

    def log(self, message: str, error=False):
        """Ghi log v√†o ScrolledText widget."""
        self.log_text.config(state="normal")
        if error:
            self.log_text.insert(tk.END, f"L·ªñI: {message}\n")
        else:
            self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END) # T·ª± ƒë·ªông cu·ªôn xu·ªëng cu·ªëi
        self.log_text.config(state="disabled")

if __name__ == "__main__":
    root = tk.Tk()
    app = Application(master=root)
    app.mainloop()